{"version":3,"sources":["images/back.png","logo.svg","Cards.js","images/akm.jpg","images/glock.jpg","images/m1a.jpg","images/mp5.png","images/m1911.jpg","images/berreta.jpg","images/rpg.jpg","images/makarov.png","images/famas.jpg","score.js","Board.js","login.js","App.js","reportWebVitals.js","index.js"],"names":["Cards","background1","this","props","faceUp","content","back","onClick","flip","className","style","background","React","Component","Score","console","log","score","Board","tab","rpg","makarov","famas","glock","tab2","concat","sort","Math","random","map","x","index","state","firstcard","total","length","fin","setState","j","i","setTimeout","flip2","scoreMoins","alert","firstcardcontent","secondcardcontent","firstcardindex","secondcardindex","memecarte","scorePlus","findegame","akm","Login","text","event","target","value","type","onKeyUp","handleChange","bind","App","window","location","reload","refreshPage","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.70020e08.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/back.8fb642e2.png\";","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react'\nimport './Cards.css'\nimport back from './images/back.png'\n\n\nclass Cards extends React.Component{//je crée une class cards qui definit mes cartes \n\n    render(){\n        let background1 ;\n        if(this.props.faceUp){// si true donc flip on récupère le content dans board \n            background1=this.props.content\n        }\n        else{\n            background1=back //si non on gard back \n            \n        }\n\n        return (\n            <div onClick={this.props.flip} className={`Cards ${this.props.faceUp}`} style={{ background: `url(${background1})` }}> \n            </div>\n    \n        )\n    }\n}\n\n\nexport default Cards","export default __webpack_public_path__ + \"static/media/akm.63bc4087.jpg\";","export default __webpack_public_path__ + \"static/media/glock.0a21e1a3.jpg\";","export default __webpack_public_path__ + \"static/media/m1a.7e5b3bab.jpg\";","export default __webpack_public_path__ + \"static/media/mp5.9027021c.png\";","export default __webpack_public_path__ + \"static/media/m1911.ca401c47.jpg\";","export default __webpack_public_path__ + \"static/media/berreta.7df33853.jpg\";","export default __webpack_public_path__ + \"static/media/rpg.414773f9.jpg\";","export default __webpack_public_path__ + \"static/media/makarov.216f1a4f.png\";","export default __webpack_public_path__ + \"static/media/famas.e54ed0b1.jpg\";","import React from 'react'\n\nclass Score extends React.Component{\n\n\n    render(){\n        console.log(this.props.score,\"LE SCORE \")\n        return (\n            <div>votre score : {this.props.score}</div>\n        )\n    }\n}\n\n\n\nexport default Score;","import Cards from './Cards.js'\nimport akm from './images/akm.jpg'\nimport m4a1 from './images/m4a1.png'\nimport m1a from './images/m1a.jpg'\nimport mp5 from './images/mp5.png'\nimport m1911 from './images/m1911.jpg'\nimport berreta from './images/berreta.jpg'\nimport glock from './images/glock.jpg'\nimport rpg from './images/rpg.jpg'\nimport makarov from './images/makarov.png'\nimport famas from './images/famas.jpg'\nimport React from 'react'\nimport './Board.css'\nimport Score from \"./score.js\"\nimport App from './App.js'\n\n\nclass Board extends React.Component{// je crée une class board qui est le plateau\n    constructor(props){\n        super(props)\n        const tab=[\n            //akm,m4a1,m1a,mp5,m1911,berreta,\n            //glock,je n'en met pas plus mais l'idée est la\n            rpg,makarov,famas,glock, //je put mes images dans un tab\n        ]\n        const index=0\n        const tab2=tab\n        .concat(tab)\n        .sort(() => Math.random()-0.5) // je crée un nouvel array pour random et en + je rajoute une valeur faceup pour savoir si je flip\n        .map((x,index)=>{\n            return {\n                content:x,\n                faceUp:false,\n                index:index, // pour eviter certains bug \n            }\n        })// \n        console.log(tab2)\n        this.state={\n            tab2: tab2,\n            firstcard : null, //je crée cette valeur car si je pick une carte , elle sera plus null\n            score: 0,\n            total: tab2.length/2,\n            fin:0,\n        }\n    }\n\n    scorePlus(x){\n        this.setState({score:this.state.score+x})\n        console.log(\"vous avez gagné des points\",this.state.score)\n    }\n    scoreMoins(x){\n        this.setState({score:this.state.score-x})\n        console.log(\"vous avez perdu des points\",this.state.score)\n\n    }\n\n    fin(x){\n        this.setState({fin:this.state.fin+x})\n    }\n\n    flip2(j,faceUp){\n        this.setState({\n            tab2:this.state.tab2.map((x,i)=>{ //i est l'index de ma carte d'avant et j est ma carte choisi mtn\n                if(i===j){//si je ne fais pas ça, toutes les cartes flip \n                    console.log(i,j)\n                    return {\n                        content:x.content, // si ma carte choisi == la carte cliqué je flip, je rajoute le content et change la valeur faceup \n                        faceUp: !x.faceUp,\n                        index: x.index,\n                    }\n                }\n                else {\n                    //sinon je renvoie tout\n                    return x;\n                }\n            })\n        })\n        console.log(this.state.tab2[j]);\n\n    }\n    memecarte(j){\n        return(\n            setTimeout(()=>{\n                this.flip2(this.state.firstcard,false)\n                this.flip2(j,false)\n                this.setState({firstcard:null});//je remet firstcard a null sinon le content de la première carte reste\n                this.scoreMoins(1)\n                alert(\"vous avez choisi la meme carte\")\n\n            },1000)\n            \n        )\n    }\n\n    dejaflip(j){\n        return(\n            alert(\"carte déja flip\")\n        )\n    }\n\n    flip(j){\n\n        if(this.state.firstcard === null){ // donc quand je flip, firstcarte prend la valeur de la carte choisi\n            this.setState({firstcard : j});\n        }\n        else {\n            const firstcardcontent= this.state.tab2[this.state.firstcard].content; //je verifi le contenu de la premire et seconde carte\n            const secondcardcontent= this.state.tab2[j].content;\n\n            const firstcardindex=this.state.tab2[this.state.firstcard].index;\n            const secondcardindex=this.state.tab2[j].index;\n            \n            const firstcardfaceup=this.state.tab2[this.state.firstcard].faceUp;\n            const secondcardfaceup=this.state.tab2[j].faceUp\n            //if (firstcardfaceup===true || secondcardfaceup==true){\n                //this.dejaflip()\n\n            \n            if(firstcardindex===secondcardindex){ // si meme carte, je lance rien\n                console.log(\"meme carte\")\n                this.memecarte(j)\n            }\n\n            else{\n\n                console.log(firstcardindex,secondcardindex,\"INDEX\")\n\n                console.log(firstcardcontent,secondcardcontent,'content')\n\n\n                if(firstcardcontent === secondcardcontent){\n                    console.log(\"gagner\")\n                    this.setState({firstcard:null}); //je remet firstcard a null sinon le content de la première carte reste et faceup reste true donc les cartes sont un peu lock\n                    this.scorePlus(3)\n                    this.fin(1)\n              \n                    }   \n                    else {\n                    console.log(\"perdu\")  // si elle ne sont pas la meme j'utilise ma fonction flip2, qui initilise faceup a false de firstcard et de la carte choisi j\n                    setTimeout(()=>{\n                        this.flip2(this.state.firstcard,false)\n                        this.flip2(j,false)\n                        this.setState({firstcard:null});//je remet firstcard a null sinon le content de la première carte reste\n                        this.scoreMoins(1)\n                        console.log(\"le score est de :\", this.state.score)\n\n                    },2000)\n                }\n            }\n        }\n        console.log(\"le score est de :\", this.state.score)\n        this.flip2(j,!this.state.tab2[j].faceUp)\n        \n\n    }\n    \n\n\n\n    findegame(){        // fonction pour gagné \n        if(this.state.fin===this.state.total){\n            return(\n                \n                alert(\"Bien joué vous avez gagné\"));\n                                \n        }\n    }\n    render(){\n    \n    return (\n\n        this.findegame(),\n        console.log(this.state.score),\n        console.log(this.state.fin,\"FIN NOMBRE\"),\n        console.log(this.state.total,\"le total de lenght\"),\n        console.log(akm),\n        console.log(this.state.firstcard),\n        this.state.tab2.map((x,i) => {\n        return (\n        <div className=\"Board\" >\n            <Cards \n            flip={()=> {this.flip(i)}} \n            content={x.content} \n            faceUp={x.faceUp}\n            />\n            <Score score={this.state.score}/>\n        </div>\n        \n        \n        )\n        }\n    ))\n    }\n}\n\n\n\n\nexport default Board","import React from \"react\";\n\nclass Login extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n          text: ''\n        };\n      };\n    \n      handleChange(event) {\n        this.setState({\n          text: event.target.value\n        });\n      };\n    \n      render() {\n        return (\n          <div>\n            <h1>Bienvenue {this.state.text}</h1>\n            <input type=\"text\" onKeyUp={this.handleChange.bind(this)} />\n            <button onClick={()=>alert(\"Bienvenue a toi \")}>Valider votre nom</button>\n          </div>\n        );\n      }\n    }\nexport default Login;","import React from 'react'\nimport logo from './logo.svg';\nimport './App.css';\nimport Board from './Board.js';\nimport Score from './score.js'\nimport Login from './login.js'\n\nclass App extends React.Component {\n\n  refreshPage() {\n    window.location.reload();\n  }\n  render(){ \n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n        <Login/>\n          <p>\n            Memarmy\n          </p>\n        </header>\n        <body>\n        <Board />\n\n        <div>\n        <button onClick={()=>this.refreshPage(true)}>refresh!</button>\n        </div>\n        </body>\n      </div>\n      \n    );\n  }\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}