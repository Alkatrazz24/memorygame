[{"/home/alka/Desktop/web-front/memory/memory2/src/index.js":"1","/home/alka/Desktop/web-front/memory/memory2/src/App.js":"2","/home/alka/Desktop/web-front/memory/memory2/src/reportWebVitals.js":"3","/home/alka/Desktop/web-front/memory/memory2/src/Board.js":"4","/home/alka/Desktop/web-front/memory/memory2/src/score.js":"5","/home/alka/Desktop/web-front/memory/memory2/src/login.js":"6","/home/alka/Desktop/web-front/memory/memory2/src/Cards.js":"7"},{"size":500,"mtime":1608599091284,"results":"8","hashOfConfig":"9"},{"size":642,"mtime":1608677780460,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1608599091284,"results":"11","hashOfConfig":"9"},{"size":6324,"mtime":1608677781312,"results":"12","hashOfConfig":"9"},{"size":245,"mtime":1608677783960,"results":"13","hashOfConfig":"9"},{"size":615,"mtime":1608677783120,"results":"14","hashOfConfig":"9"},{"size":658,"mtime":1608677785913,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"zxqih0",{"filePath":"19","messages":"20","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/alka/Desktop/web-front/memory/memory2/src/index.js",[],["33","34"],"/home/alka/Desktop/web-front/memory/memory2/src/App.js",["35","36"],"import React from 'react'\nimport logo from './logo.svg';\nimport './App.css';\nimport Board from './Board.js';\nimport Score from './score.js'\nimport Login from './login.js'\n\nclass App extends React.Component {\n\n  refreshPage() {\n    window.location.reload();\n  }\n  render(){ \n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n        <Login/>\n          <p>\n            Memarmy\n          </p>\n        </header>\n        <body>\n        <Board />\n\n        <div>\n        <button onClick={()=>this.refreshPage(true)}>refresh!</button>\n        </div>\n        </body>\n      </div>\n      \n    );\n  }\n}\nexport default App;\n","/home/alka/Desktop/web-front/memory/memory2/src/reportWebVitals.js",[],"/home/alka/Desktop/web-front/memory/memory2/src/Board.js",["37","38","39","40","41","42","43","44","45"],"import Cards from './Cards.js'\nimport akm from './images/akm.jpg'\nimport m4a1 from './images/m4a1.png'\nimport m1a from './images/m1a.jpg'\nimport mp5 from './images/mp5.png'\nimport m1911 from './images/m1911.jpg'\nimport berreta from './images/berreta.jpg'\nimport glock from './images/glock.jpg'\nimport rpg from './images/rpg.jpg'\nimport makarov from './images/makarov.png'\nimport famas from './images/famas.jpg'\nimport React from 'react'\nimport './Board.css'\nimport Score from \"./score.js\"\nimport App from './App.js'\n\n\nclass Board extends React.Component{// je crée une class board qui est le plateau\n    constructor(props){\n        super(props)\n        const tab=[\n            //akm,m4a1,m1a,mp5,m1911,berreta,\n            //glock,je n'en met pas plus mais l'idée est la\n            rpg,makarov,famas,glock, //je put mes images dans un tab\n        ]\n        const index=0\n        const tab2=tab\n        .concat(tab)\n        .sort(() => Math.random()-0.5) // je crée un nouvel array pour random et en + je rajoute une valeur faceup pour savoir si je flip\n        .map((x,index)=>{\n            return {\n                content:x,\n                faceUp:false,\n                index:index, // pour eviter certains bug \n            }\n        })// \n        console.log(tab2)\n        this.state={\n            tab2: tab2,\n            firstcard : null, //je crée cette valeur car si je pick une carte , elle sera plus null\n            score: 0,\n            total: tab2.length/2,\n            fin:0,\n        }\n    }\n\n    scorePlus(x){\n        this.setState({score:this.state.score+x})\n        console.log(\"vous avez gagné des points\",this.state.score)\n    }\n    scoreMoins(x){\n        this.setState({score:this.state.score-x})\n        console.log(\"vous avez perdu des points\",this.state.score)\n\n    }\n\n    fin(x){\n        this.setState({fin:this.state.fin+x})\n    }\n\n    flip2(j,faceUp){\n        this.setState({\n            tab2:this.state.tab2.map((x,i)=>{ //i est l'index de ma carte d'avant et j est ma carte choisi mtn\n                if(i===j){//si je ne fais pas ça, toutes les cartes flip \n                    console.log(i,j)\n                    return {\n                        content:x.content, // si ma carte choisi == la carte cliqué je flip, je rajoute le content et change la valeur faceup \n                        faceUp: !x.faceUp,\n                        index: x.index,\n                    }\n                }\n                else {\n                    //sinon je renvoie tout\n                    return x;\n                }\n            })\n        })\n        console.log(this.state.tab2[j]);\n\n    }\n    memecarte(j){\n        return(\n            setTimeout(()=>{\n                this.flip2(this.state.firstcard,false)\n                this.flip2(j,false)\n                this.setState({firstcard:null});//je remet firstcard a null sinon le content de la première carte reste\n                this.scoreMoins(1)\n                alert(\"vous avez choisi la meme carte\")\n\n            },1000)\n            \n        )\n    }\n\n    dejaflip(j){\n        return(\n            alert(\"carte déja flip\")\n        )\n    }\n\n    flip(j){\n\n        if(this.state.firstcard === null){ // donc quand je flip, firstcarte prend la valeur de la carte choisi\n            this.setState({firstcard : j});\n        }\n        else {\n            const firstcardcontent= this.state.tab2[this.state.firstcard].content; //je verifi le contenu de la premire et seconde carte\n            const secondcardcontent= this.state.tab2[j].content;\n\n            const firstcardindex=this.state.tab2[this.state.firstcard].index;\n            const secondcardindex=this.state.tab2[j].index;\n            \n            const firstcardfaceup=this.state.tab2[this.state.firstcard].faceUp;\n            const secondcardfaceup=this.state.tab2[j].faceUp\n            //if (firstcardfaceup===true || secondcardfaceup==true){\n                //this.dejaflip()\n\n            \n            if(firstcardindex===secondcardindex){ // si meme carte, je lance rien\n                console.log(\"meme carte\")\n                this.memecarte(j)\n            }\n\n            else{\n\n                console.log(firstcardindex,secondcardindex,\"INDEX\")\n\n                console.log(firstcardcontent,secondcardcontent,'content')\n\n\n                if(firstcardcontent === secondcardcontent){\n                    console.log(\"gagner\")\n                    this.setState({firstcard:null}); //je remet firstcard a null sinon le content de la première carte reste et faceup reste true donc les cartes sont un peu lock\n                    this.scorePlus(3)\n                    this.fin(1)\n              \n                    }   \n                    else {\n                    console.log(\"perdu\")  // si elle ne sont pas la meme j'utilise ma fonction flip2, qui initilise faceup a false de firstcard et de la carte choisi j\n                    setTimeout(()=>{\n                        this.flip2(this.state.firstcard,false)\n                        this.flip2(j,false)\n                        this.setState({firstcard:null});//je remet firstcard a null sinon le content de la première carte reste\n                        this.scoreMoins(1)\n                        console.log(\"le score est de :\", this.state.score)\n\n                    },2000)\n                }\n            }\n        }\n        console.log(\"le score est de :\", this.state.score)\n        this.flip2(j,!this.state.tab2[j].faceUp)\n        \n\n    }\n    \n\n\n\n    findegame(){        // fonction pour gagné \n        if(this.state.fin===this.state.total){\n            return(\n                \n                alert(\"Bien joué vous avez gagné\"));\n                                \n        }\n    }\n    render(){\n    \n    return (\n\n        this.findegame(),\n        console.log(this.state.score),\n        console.log(this.state.fin,\"FIN NOMBRE\"),\n        console.log(this.state.total,\"le total de lenght\"),\n        console.log(akm),\n        console.log(this.state.firstcard),\n        this.state.tab2.map((x,i) => {\n        return (\n        <div className=\"Board\" >\n            <Cards \n            flip={()=> {this.flip(i)}} \n            content={x.content} \n            faceUp={x.faceUp}\n            />\n            <Score score={this.state.score}/>\n        </div>\n        \n        \n        )\n        }\n    ))\n    }\n}\n\n\n\n\nexport default Board","/home/alka/Desktop/web-front/memory/memory2/src/score.js",[],"/home/alka/Desktop/web-front/memory/memory2/src/login.js",[],"/home/alka/Desktop/web-front/memory/memory2/src/Cards.js",[],{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","severity":1,"message":"51","line":2,"column":8,"nodeType":"52","messageId":"53","endLine":2,"endColumn":12},{"ruleId":"50","severity":1,"message":"54","line":5,"column":8,"nodeType":"52","messageId":"53","endLine":5,"endColumn":13},{"ruleId":"50","severity":1,"message":"55","line":3,"column":8,"nodeType":"52","messageId":"53","endLine":3,"endColumn":12},{"ruleId":"50","severity":1,"message":"56","line":4,"column":8,"nodeType":"52","messageId":"53","endLine":4,"endColumn":11},{"ruleId":"50","severity":1,"message":"57","line":5,"column":8,"nodeType":"52","messageId":"53","endLine":5,"endColumn":11},{"ruleId":"50","severity":1,"message":"58","line":6,"column":8,"nodeType":"52","messageId":"53","endLine":6,"endColumn":13},{"ruleId":"50","severity":1,"message":"59","line":7,"column":8,"nodeType":"52","messageId":"53","endLine":7,"endColumn":15},{"ruleId":"50","severity":1,"message":"60","line":15,"column":8,"nodeType":"52","messageId":"53","endLine":15,"endColumn":11},{"ruleId":"50","severity":1,"message":"61","line":26,"column":15,"nodeType":"52","messageId":"53","endLine":26,"endColumn":20},{"ruleId":"50","severity":1,"message":"62","line":113,"column":19,"nodeType":"52","messageId":"53","endLine":113,"endColumn":34},{"ruleId":"50","severity":1,"message":"63","line":114,"column":19,"nodeType":"52","messageId":"53","endLine":114,"endColumn":35},"no-native-reassign",["64"],"no-negated-in-lhs",["65"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Score' is defined but never used.","'m4a1' is defined but never used.","'m1a' is defined but never used.","'mp5' is defined but never used.","'m1911' is defined but never used.","'berreta' is defined but never used.","'App' is defined but never used.","'index' is assigned a value but never used.","'firstcardfaceup' is assigned a value but never used.","'secondcardfaceup' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]